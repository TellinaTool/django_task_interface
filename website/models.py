"""
Stub file was autogenerated by `python3 manage.py startproject website`.

This file defines special model classes that are used to create and manipulate
SQL tables.

Create an SQL database with these model definitions by running:

python3 manage.py makemigrations website
python3 manage.py migrate
"""
from django.db import models
from django.utils import timezone
from channels import Channel
from .filesystem import dict_2_disk, disk_2_dict

import docker
import requests
import os
import time
import subprocess
import uuid
import fcntl
import datetime
import pathlib
import json
from typing import Optional


class User(models.Model):
    """
    Describes a study participant.

    :member access_code: Code which uniquely identifies a study participant.
        Participants will use this to log into the task interface.
    :member first_name: user's first name
    :member last_name: user's last name
    """
    access_code = models.TextField()
    first_name = models.TextField()
    last_name = models.TextField()


class StudySession(models.Model):
    """
    A study session participated by a user.

    The infrastructure of a session contains
        - an instance of a Docker container
        - the WebSocket from the container to this server
        - the WebSocket from the user to this server

    :member user: The participant of the session.
    :member session_id: an application-wide unique session ID.
    :member status: Indicate if the study session is completed by the
        participant or not.
    :member container_id: The ID of the Container model associated with the
        session. -1 if no container is associated.
    :member container_stdin_channel: The name of the Channel connected to
        the container's STDIN. '' means this channel has not been registered
        and the websocket is not connected yet.
    :member xterm_stdout_channel: The name of the Channel connected to
        xterm's STDOUT. '' means this channel has not been registered and the
        websocket is not connected yet.

    See consumers.py for how Channels are registered.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    session_id = models.TextField()
    status = models.TextField()

    container_id = models.IntegerField()
    container_stdin_channel = models.TextField()
    xterm_stdout_channel = models.TextField()


class Task(models.Model):
    """
    Describes a task used in the study.

    :member type: The type of task. Can be 'stdout' or 'filesystem'.
    :member description: A human-readable description of the task.
    :member initial_filesystem: JSON representation of the user's starting home
        directory
    :member goal: Goal stdout (if type is 'stdout') or JSON representation of
        the goal directory (if type is 'filesystem')
    :member duration: How much time is alotted for the task.
    """
    type = models.TextField()
    description = models.TextField()
    initial_filesystem = models.TextField()
    goal = models.TextField()
    duration = models.DurationField()

    def to_dict(self) -> dict:
        """Returns a dictionary representation of the task."""
        answer = None
        if self.type == 'filesystem':
            answer = json.loads(self.answer)
        elif self.type == 'stdout':
            answer = self.answer
        else:
            raise Exception('unrecognized task type')
        return {
            'type': self.type,
            'description': self.description,
            'initial_filesystem': json.loads(self.initial_filesystem),
            'answer': answer,
            'duration': self.duration.seconds,
        }


class TaskSession(models.Model):
    """
    A task performed by a user in a study session.

    :member study_session: The study session to which the task session belong.
    :member task: The task being performed in the task session.
    :member start_time: The start time of a task session.
    :member end_time: The end time of a task session.
    :member status: The state of the task result.
        - 'running':     The user has started the task, but the task has not
                         passed nor timed out yet
        - 'timed_out':   The user started the task and did not pass it before
                         running out of time
        - 'passed':      The user started the task and passed it
    """
    study_session = models.ForeignKey(StudySession, on_delete=models.CASCADE)
    task = models.ForeignKey(Task)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    status = models.TextField()


class ActionHistory(models.Model):
    """
    An action history includes the operations done by the user at a specific
    time in a task session.

    :member task_session: The task session during which the action is taken.
    :member action: The action performed by the user, including
        - bash command issued by the user in the terminal
        - `quit` if the user quit the task
        - `reset` if the user resets the filesystem
    :member action_time: The time the action is taken.
    """

    task_session = models.ForeignKey(TaskSession, on_delete=models.CASCADE)
    action = models.TextField()
    action_time = models.DateTimeField()


class TaskManager(models.Model):
    """Handles logic related to starting, stopping, and resetting tasks.

    Each user has one TaskManager.

    Each method of TaskManager acquires/releases a file lock so that concurrent
    method calls are serialized.
    """

    study_session = models.ForeignKey(StudySession, on_delete=models.CASCADE)

    # Prefix to be used in naming lock files.
    LOCK_FILE_PREFIX = 'task_manager_lock_'






