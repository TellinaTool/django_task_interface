"""
Stub file was autogenerated by `python3 manage.py startproject website`.

This file contains unit tests that are run with
`python3 manage.py test`.
"""

from django.test import TestCase
from .filesystem import *
from .models import *

import pathlib
import datetime
import docker

class ModelTestCase(TestCase):
    def test_container(self):
        filesystem_name = 'tellina_session_my_fs'
        filesystem = {'hello.txt': None}
        cli = docker.Client(base_url='unix://var/run/docker.sock')

        # Create container
        container = create_container(filesystem_name, filesystem)
        
        # Check that container was cretaed
        try:
            cli.inspect_container(container=container.container_id)
        except docker.errors.NotFound as e:
            self.fail()

        # Check that filesystem is there
        self.assertTrue((pathlib.Path('/') / filesystem_name / 'home' / 'hello.txt').exists())
        self.assertTrue((pathlib.Path('/') / 'home' / 'vagrant' / '{}.ext4'.format(filesystem_name)).exists())
        
        # Check that entry created in database
        self.assertEqual(len(Container.objects.all()), 1)
        self.assertEqual(container.filesystem_name, filesystem_name)
        self.assertNotEqual(container.container_id, '')
        self.assertGreater(container.port, 0)

        # Destroy container
        container.destroy()

        # Check that container does not exist
        is_container_destroyed = False
        try:
            cli.inspect_container(container=container.container_id)
        except docker.errors.NotFound as e:
            is_container_destroyed = True
        self.assertTrue(is_container_destroyed)

        # Check that filesystem is gone
        self.assertFalse((pathlib.Path('/') / filesystem_name).exists())
        self.assertFalse((pathlib.Path('/') / 'home' / 'vagrant' / '{}.ext4'.format(filesystem_name)).exists())

        # Check that database row was deleted
        self.assertEqual(len(Container.objects.all()), 0)

class FilesystemTestCase(TestCase):
    def test_disk_2_dict(self):
        expected = {'test_directory_tree': {'dir1': {'dir2': {'file2.txt': None}}, 'file1.txt': None, 'README.md': None}}
        actual = disk_2_dict(pathlib.Path('website/test_directory_tree'))
        self.assertEqual(actual, expected)

class TaskTestCase(TestCase):
    def test_to_dict_stdout(self):
        task = Task(
            type="stdout",
            description='description here',
            initial_filesystem='{"a": null}',
            answer='answer here',
            duration=datetime.timedelta(seconds=1),
        )
        expected = {
            'type': "stdout",
            'description': 'description here',
            'initial_filesystem': {
                'a': None
            },
            'answer': 'answer here',
            'duration': 1,
        }
        self.assertEqual(task.to_dict(), expected)

    def test_to_dict_filesystem(self):
        task = Task(
            type='filesystem_change',
            description='description here',
            initial_filesystem='{"a": null}',
            answer='{"b": null}',
            duration=datetime.timedelta(seconds=1),
        )
        expected = {
            'type': 'filesystem_change',
            'description': 'description here',
            'initial_filesystem': {
                'a': None
            },
            'answer': {
                'b': None,
            },
            'duration': 1,
        }
        self.assertEqual(task.to_dict(), expected)
